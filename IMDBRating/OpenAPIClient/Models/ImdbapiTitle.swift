//
// ImdbapiTitle.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ImdbapiTitle: Sendable, Codable, ParameterConvertible, Hashable {

    /** The unique identifier for the title. */
    public var id: String?
    /** The type of the title, such as \"movie\", \"tvSeries\", \"tvEpisode\", etc. */
    public var type: String?
    /** The is_adult field indicates whether the title is intended for adult audiences. */
    public var isAdult: Bool?
    /** The primary title of the title, which is typically the most recognized name. */
    public var primaryTitle: String?
    /** The original title of the title, normally which is the title as it was originally released. */
    public var originalTitle: String?
    public var primaryImage: ImdbapiImage?
    /** The start_year field is used for titles that have a defined start, such as movies or TV series. */
    public var startYear: Int?
    /** The end_year field is used for titles that have a defined end, such as TV series. */
    public var endYear: Int?
    /** The runtime_seconds field contains the total runtime of the title in minutes. */
    public var runtimeSeconds: Int?
    /** The genres field contains a list of genres associated with the title. */
    public var genres: [String]?
    public var rating: ImdbapiRating?
    public var metacritic: ImdbapiMetacritic?
    /** The plot field contains a brief summary or description of the title's storyline. */
    public var plot: String?
    /** The list of directors associated with the title, which can include multiple directors. */
    public var directors: [ImdbapiName]?
    /** The list of writers associated with the title, which can include multiple writers. */
    public var writers: [ImdbapiName]?
    /** The list of stars associated with the title, which can include multiple actors or actresses. */
    public var stars: [ImdbapiName]?
    /** The list of countries where the title was produced or is associated with. */
    public var originCountries: [ImdbapiCountry]?
    /** The list of languages spoken in the title, which can include multiple languages. */
    public var spokenLanguages: [ImdbapiLanguage]?
    /** The list of interests associated with the title. */
    public var interests: [ImdbapiInterest]?

    public init(id: String? = nil, type: String? = nil, isAdult: Bool? = nil, primaryTitle: String? = nil, originalTitle: String? = nil, primaryImage: ImdbapiImage? = nil, startYear: Int? = nil, endYear: Int? = nil, runtimeSeconds: Int? = nil, genres: [String]? = nil, rating: ImdbapiRating? = nil, metacritic: ImdbapiMetacritic? = nil, plot: String? = nil, directors: [ImdbapiName]? = nil, writers: [ImdbapiName]? = nil, stars: [ImdbapiName]? = nil, originCountries: [ImdbapiCountry]? = nil, spokenLanguages: [ImdbapiLanguage]? = nil, interests: [ImdbapiInterest]? = nil) {
        self.id = id
        self.type = type
        self.isAdult = isAdult
        self.primaryTitle = primaryTitle
        self.originalTitle = originalTitle
        self.primaryImage = primaryImage
        self.startYear = startYear
        self.endYear = endYear
        self.runtimeSeconds = runtimeSeconds
        self.genres = genres
        self.rating = rating
        self.metacritic = metacritic
        self.plot = plot
        self.directors = directors
        self.writers = writers
        self.stars = stars
        self.originCountries = originCountries
        self.spokenLanguages = spokenLanguages
        self.interests = interests
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case isAdult
        case primaryTitle
        case originalTitle
        case primaryImage
        case startYear
        case endYear
        case runtimeSeconds
        case genres
        case rating
        case metacritic
        case plot
        case directors
        case writers
        case stars
        case originCountries
        case spokenLanguages
        case interests
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(isAdult, forKey: .isAdult)
        try container.encodeIfPresent(primaryTitle, forKey: .primaryTitle)
        try container.encodeIfPresent(originalTitle, forKey: .originalTitle)
        try container.encodeIfPresent(primaryImage, forKey: .primaryImage)
        try container.encodeIfPresent(startYear, forKey: .startYear)
        try container.encodeIfPresent(endYear, forKey: .endYear)
        try container.encodeIfPresent(runtimeSeconds, forKey: .runtimeSeconds)
        try container.encodeIfPresent(genres, forKey: .genres)
        try container.encodeIfPresent(rating, forKey: .rating)
        try container.encodeIfPresent(metacritic, forKey: .metacritic)
        try container.encodeIfPresent(plot, forKey: .plot)
        try container.encodeIfPresent(directors, forKey: .directors)
        try container.encodeIfPresent(writers, forKey: .writers)
        try container.encodeIfPresent(stars, forKey: .stars)
        try container.encodeIfPresent(originCountries, forKey: .originCountries)
        try container.encodeIfPresent(spokenLanguages, forKey: .spokenLanguages)
        try container.encodeIfPresent(interests, forKey: .interests)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension ImdbapiTitle: Identifiable {}
