//
// ImdbapiAwardNomination.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** AwardNomination represents a nomination for an award.  The unique identifier for the award nomination.   string id &#x3D; 1
 [(google.api.field_visibility).restriction &#x3D; \&quot;INTERNAL\&quot;]; */
public struct ImdbapiAwardNomination: Sendable, Codable, ParameterConvertible, Hashable {

    /** The titles associated with the award nomination. */
    public var titles: [ImdbapiTitle]?
    /** The nominees associated with the award nomination. */
    public var nominees: [ImdbapiName]?
    public var event: ImdbapiEvent?
    /** The year of the award nomination. */
    public var year: Int?
    /** The text description of the award nomination. */
    public var text: String?
    /** The category of the award nomination. */
    public var category: String?
    /** Whether the nomination is a winner. */
    public var isWinner: Bool?
    /** The rank of the winner in the nomination. */
    public var winnerRank: Int?

    public init(titles: [ImdbapiTitle]? = nil,
                nominees: [ImdbapiName]? = nil,
                event: ImdbapiEvent? = nil,
                year: Int? = nil,
                text: String? = nil,
                category: String? = nil,
                isWinner: Bool? = nil,
                winnerRank: Int? = nil) {
        self.titles = titles
        self.nominees = nominees
        self.event = event
        self.year = year
        self.text = text
        self.category = category
        self.isWinner = isWinner
        self.winnerRank = winnerRank
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case titles
        case nominees
        case event
        case year
        case text
        case category
        case isWinner
        case winnerRank
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(titles, forKey: .titles)
        try container.encodeIfPresent(nominees, forKey: .nominees)
        try container.encodeIfPresent(event, forKey: .event)
        try container.encodeIfPresent(year, forKey: .year)
        try container.encodeIfPresent(text, forKey: .text)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(isWinner, forKey: .isWinner)
        try container.encodeIfPresent(winnerRank, forKey: .winnerRank)
    }
}

