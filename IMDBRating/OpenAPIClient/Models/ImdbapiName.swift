//
// ImdbapiName.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** The Name message represents a person in the IMDb database, such as an actor, director, or producer. */
public struct ImdbapiName: Sendable, Codable, ParameterConvertible, Hashable {

    /** The unique identifier for the name in the IMDb database. */
    public var id: String?
    /** The display name of the person, typically their full name. */
    public var displayName: String?
    /** Alternative names for the person, which may include stage names, nicknames, or other variations. */
    public var alternativeNames: [String]?
    public var primaryImage: ImdbapiImage?
    /** A list of primary professions associated with the person, such as \"Actor\", \"Director\", \"Producer\", etc. */
    public var primaryProfessions: [String]?
    /** A brief biography or description of the person, which may include their career highlights,
     achievements, and other relevant information. */
    public var biography: String?
    /** The height of the person in centimeters. */
    public var heightCm: Int?
    /** The birth name of the person, which may differ from their display name. */
    public var birthName: String?
    public var birthDate: ImdbapiPrecisionDate?
    /** The birth location of the person, which may include the city and country of birth. */
    public var birthLocation: String?
    public var deathDate: ImdbapiPrecisionDate?
    /** The death location of the person, which may include the city and country of death. */
    public var deathLocation: String?
    /** The reason for the person's death, if applicable. */
    public var deathReason: String?
    public var meterRanking: ImdbapiNameMeterRanking?

    public init(id: String? = nil,
                displayName: String? = nil,
                alternativeNames: [String]? = nil,
                primaryImage: ImdbapiImage? = nil,
                primaryProfessions: [String]? = nil,
                biography: String? = nil,
                heightCm: Int? = nil,
                birthName: String? = nil,
                birthDate: ImdbapiPrecisionDate? = nil,
                birthLocation: String? = nil,
                deathDate: ImdbapiPrecisionDate? = nil,
                deathLocation: String? = nil,
                deathReason: String? = nil,
                meterRanking: ImdbapiNameMeterRanking? = nil) {
        self.id = id
        self.displayName = displayName
        self.alternativeNames = alternativeNames
        self.primaryImage = primaryImage
        self.primaryProfessions = primaryProfessions
        self.biography = biography
        self.heightCm = heightCm
        self.birthName = birthName
        self.birthDate = birthDate
        self.birthLocation = birthLocation
        self.deathDate = deathDate
        self.deathLocation = deathLocation
        self.deathReason = deathReason
        self.meterRanking = meterRanking
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case displayName
        case alternativeNames
        case primaryImage
        case primaryProfessions
        case biography
        case heightCm
        case birthName
        case birthDate
        case birthLocation
        case deathDate
        case deathLocation
        case deathReason
        case meterRanking
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(alternativeNames, forKey: .alternativeNames)
        try container.encodeIfPresent(primaryImage, forKey: .primaryImage)
        try container.encodeIfPresent(primaryProfessions, forKey: .primaryProfessions)
        try container.encodeIfPresent(biography, forKey: .biography)
        try container.encodeIfPresent(heightCm, forKey: .heightCm)
        try container.encodeIfPresent(birthName, forKey: .birthName)
        try container.encodeIfPresent(birthDate, forKey: .birthDate)
        try container.encodeIfPresent(birthLocation, forKey: .birthLocation)
        try container.encodeIfPresent(deathDate, forKey: .deathDate)
        try container.encodeIfPresent(deathLocation, forKey: .deathLocation)
        try container.encodeIfPresent(deathReason, forKey: .deathReason)
        try container.encodeIfPresent(meterRanking, forKey: .meterRanking)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension ImdbapiName: Identifiable {}
