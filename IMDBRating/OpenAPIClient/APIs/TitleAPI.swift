//
// TitleAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class TitleAPI {
    
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceBatchGetTitles(titleIds: [String],
                                                 apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiBatchGetTitlesResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceBatchGetTitlesWithRequestBuilder(titleIds: titleIds, apiConfiguration: config).execute().body
    }
    
    open class func iMDbAPIServiceBatchGetTitlesWithRequestBuilder(titleIds: [String],
                                                                   apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared)
    -> RequestBuilder<ImdbapiBatchGetTitlesResponse> {
        let localVariablePath = "/titles:batchGet"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil
        
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "titleIds": (wrappedValue: titleIds.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])
        
        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]
        
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        
        let localVariableRequestBuilder: RequestBuilder<ImdbapiBatchGetTitlesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()
        
        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }
    
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceGetTitle(titleId: String,
                                           apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiTitle {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceGetTitleWithRequestBuilder(titleId: titleId, apiConfiguration: config).execute().body
    }
    
    open class func iMDbAPIServiceGetTitleWithRequestBuilder(titleId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiTitle> {
        var localVariablePath = "/titles/{titleId}"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil
        
        let localVariableUrlComponents = URLComponents(string: localVariableURLString)
        
        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]
        
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        
        let localVariableRequestBuilder: RequestBuilder<ImdbapiTitle>.Type = apiConfiguration.requestBuilderFactory.getBuilder()
        
        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }
    
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceGetTitleBoxOffice(titleId: String,
                                                    apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiBoxOffice {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceGetTitleBoxOfficeWithRequestBuilder(titleId: titleId, apiConfiguration: config).execute().body
    }
    
    open class func iMDbAPIServiceGetTitleBoxOfficeWithRequestBuilder(titleId: String,
                                                                      apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiBoxOffice> {
        var localVariablePath = "/titles/{titleId}/boxOffice"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil
        
        let localVariableUrlComponents = URLComponents(string: localVariableURLString)
        
        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]
        
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        
        let localVariableRequestBuilder: RequestBuilder<ImdbapiBoxOffice>.Type = apiConfiguration.requestBuilderFactory.getBuilder()
        
        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }
    
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleAKAs(titleId: String, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleAKAsResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleAKAsWithRequestBuilder(titleId: titleId, apiConfiguration: config).execute().body
    }
    
    open class func iMDbAPIServiceListTitleAKAsWithRequestBuilder(titleId: String,
                                                                  apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared)
    -> RequestBuilder<ImdbapiListTitleAKAsResponse> {
        var localVariablePath = "/titles/{titleId}/akas"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil
        
        let localVariableUrlComponents = URLComponents(string: localVariableURLString)
        
        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]
        
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        
        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleAKAsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()
        
        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }
    
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleAwardNominations(titleId: String,
                                                            pageSize: Int? = nil,
                                                            pageToken: String? = nil,
                                                            apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleAwardNominationsResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleAwardNominationsWithRequestBuilder(titleId: titleId, pageSize: pageSize, pageToken: pageToken, apiConfiguration: config).execute().body
    }
    
    open class func iMDbAPIServiceListTitleAwardNominationsWithRequestBuilder(titleId: String,
                                                                              pageSize: Int? = nil,
                                                                              pageToken: String? = nil,
                                                                              apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared)
    -> RequestBuilder<ImdbapiListTitleAwardNominationsResponse> {
        var localVariablePath = "/titles/{titleId}/awardNominations"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil
        
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": (wrappedValue: [pageSize].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue: [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])
        
        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]
        
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        
        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleAwardNominationsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()
        
        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }
    
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleCertificates(titleId: String, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleCertificatesResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleCertificatesWithRequestBuilder(titleId: titleId, apiConfiguration: config).execute().body
    }
    
    open class func iMDbAPIServiceListTitleCertificatesWithRequestBuilder(titleId: String,
                                                                          apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared)
    -> RequestBuilder<ImdbapiListTitleCertificatesResponse> {
        var localVariablePath = "/titles/{titleId}/certificates"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil
        
        let localVariableUrlComponents = URLComponents(string: localVariableURLString)
        
        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]
        
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        
        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleCertificatesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()
        
        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }
    
    
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleCompanyCredits(titleId: String,
                                                          categories: [String]? = nil,
                                                          pageSize: Int? = nil,
                                                          pageToken: String? = nil,
                                                          apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleCompanyCreditsResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleCompanyCreditsWithRequestBuilder(titleId: titleId,
                                                                                 categories: categories,
                                                                                 pageSize: pageSize,
                                                                                 pageToken: pageToken,
                                                                                 apiConfiguration: config).execute().body
    }
    
    open class func iMDbAPIServiceListTitleCompanyCreditsWithRequestBuilder(titleId: String,
                                                                            categories: [String]? = nil,
                                                                            pageSize: Int? = nil,
                                                                            pageToken: String? = nil,
                                                                            apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared)
    -> RequestBuilder<ImdbapiListTitleCompanyCreditsResponse> {
        var localVariablePath = "/titles/{titleId}/companyCredits"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil
        
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "categories": (wrappedValue: categories?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageSize": (wrappedValue: [pageSize].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue: [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])
        
        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]
        
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        
        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleCompanyCreditsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()
        
        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }
    
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleCredits(titleId: String,
                                                   categories: [String]? = nil,
                                                   pageSize: Int? = nil,
                                                   pageToken: String? = nil,
                                                   apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleCreditsResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleCreditsWithRequestBuilder(titleId: titleId, categories: categories, pageSize: pageSize, pageToken: pageToken, apiConfiguration: config).execute().body
    }
    
    open class func iMDbAPIServiceListTitleCreditsWithRequestBuilder(titleId: String,
                                                                     categories: [String]? = nil,
                                                                     pageSize: Int? = nil,
                                                                     pageToken: String? = nil,
                                                                     apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared)
    -> RequestBuilder<ImdbapiListTitleCreditsResponse> {
        var localVariablePath = "/titles/{titleId}/credits"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil
        
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "categories": (wrappedValue: categories?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageSize": (wrappedValue: [pageSize].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue: [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])
        
        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]
        
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        
        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleCreditsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()
        
        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }
    
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleEpisodes(titleId: String,
                                                    season: String? = nil,
                                                    pageSize: Int? = nil,
                                                    pageToken: String? = nil,
                                                    apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleEpisodesResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleEpisodesWithRequestBuilder(titleId: titleId, season: season, pageSize: pageSize, pageToken: pageToken, apiConfiguration: config).execute().body
    }
    
    open class func iMDbAPIServiceListTitleEpisodesWithRequestBuilder(titleId: String,
                                                                      season: String? = nil,
                                                                      pageSize: Int? = nil,
                                                                      pageToken: String? = nil,
                                                                      apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared)
    -> RequestBuilder<ImdbapiListTitleEpisodesResponse> {
        var localVariablePath = "/titles/{titleId}/episodes"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil
        
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "season": (wrappedValue: [season].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageSize": (wrappedValue: [pageSize].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue: [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])
        
        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]
        
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        
        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleEpisodesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()
        
        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }
    
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleImages(titleId: String,
                                                  types: [String]? = nil,
                                                  pageSize: Int? = nil,
                                                  pageToken: String? = nil,
                                                  apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleImagesResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleImagesWithRequestBuilder(titleId: titleId, types: types, pageSize: pageSize, pageToken: pageToken, apiConfiguration: config).execute().body
    }
    
    open class func iMDbAPIServiceListTitleImagesWithRequestBuilder(titleId: String,
                                                                    types: [String]? = nil,
                                                                    pageSize: Int? = nil,
                                                                    pageToken: String? = nil,
                                                                    apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared)
    -> RequestBuilder<ImdbapiListTitleImagesResponse> {
        var localVariablePath = "/titles/{titleId}/images"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil
        
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "types": (wrappedValue: types?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageSize": (wrappedValue: [pageSize].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue: [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])
        
        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]
        
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        
        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleImagesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()
        
        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }
    
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleParentsGuide(titleId: String, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleParentsGuideResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleParentsGuideWithRequestBuilder(titleId: titleId, apiConfiguration: config).execute().body
    }
}

extension TitleAPI {
    
    open class func iMDbAPIServiceListTitleReleaseDatesWithRequestBuilder(titleId: String,
                                                                          pageSize: Int? = nil,
                                                                          pageToken: String? = nil,
                                                                          apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared)
    -> RequestBuilder<ImdbapiListTitleReleaseDatesResponse> {
        var localVariablePath = "/titles/{titleId}/releaseDates"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil
        
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": (wrappedValue: [pageSize].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue: [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])
        
        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]
        
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        
        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleReleaseDatesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()
        
        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }
    
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleSeasons(titleId: String, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleSeasonsResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleSeasonsWithRequestBuilder(titleId: titleId, apiConfiguration: config).execute().body
    }
    
    open class func iMDbAPIServiceListTitleSeasonsWithRequestBuilder(titleId: String,
                                                                     apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared)
    -> RequestBuilder<ImdbapiListTitleSeasonsResponse> {
        var localVariablePath = "/titles/{titleId}/seasons"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil
        
        let localVariableUrlComponents = URLComponents(string: localVariableURLString)
        
        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]
        
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        
        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleSeasonsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()
        
        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }
    
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleVideos(titleId: String,
                                                  types: [String]? = nil,
                                                  pageSize: Int? = nil,
                                                  pageToken: String? = nil,
                                                  apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleVideosResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleVideosWithRequestBuilder(titleId: titleId, types: types, pageSize: pageSize, pageToken: pageToken, apiConfiguration: config).execute().body
    }
    
    open class func iMDbAPIServiceListTitleVideosWithRequestBuilder(titleId: String,
                                                                    types: [String]? = nil,
                                                                    pageSize: Int? = nil,
                                                                    pageToken: String? = nil,
                                                                    apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared)
    -> RequestBuilder<ImdbapiListTitleVideosResponse> {
        var localVariablePath = "/titles/{titleId}/videos"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil
        
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "types": (wrappedValue: types?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageSize": (wrappedValue: [pageSize].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue: [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])
        
        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]
        
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        
        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleVideosResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()
        
        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }
    
    /**
     * enum for parameter types
     */
    public enum Types_iMDbAPIServiceListTitles: String, Sendable, CaseIterable {
        case movie = "MOVIE"
        case tvSeries = "TV_SERIES"
        case tvMiniSeries = "TV_MINI_SERIES"
        case tvSpecial = "TV_SPECIAL"
        case tvMovie = "TV_MOVIE"
        case short = "SHORT"
        case video = "VIDEO"
        case videoGame = "VIDEO_GAME"
    }
    
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_iMDbAPIServiceListTitles: String, Sendable, CaseIterable {
        case sortByPopularity = "SORT_BY_POPULARITY"
        case sortByReleaseDate = "SORT_BY_RELEASE_DATE"
        case sortByUserRating = "SORT_BY_USER_RATING"
        case sortByUserRatingCount = "SORT_BY_USER_RATING_COUNT"
        case sortByYear = "SORT_BY_YEAR"
    }
    
    public enum SortOrder_iMDbAPIServiceListTitles: String, Sendable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }
    
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitles(types: [Types_iMDbAPIServiceListTitles]? = nil,
                                             genres: [String]? = nil,
                                             countryCodes: [String]? = nil,
                                             languageCodes: [String]? = nil,
                                             nameIds: [String]? = nil,
                                             interestIds: [String]? = nil,
                                             startYear: Int? = nil,
                                             endYear: Int? = nil,
                                             minVoteCount: Int? = nil,
                                             maxVoteCount: Int? = nil,
                                             minAggregateRating: Float? = nil,
                                             maxAggregateRating: Float? = nil,
                                             sortBy: SortBy_iMDbAPIServiceListTitles? = nil,
                                             sortOrder: SortOrder_iMDbAPIServiceListTitles? = nil,
                                             pageToken: String? = nil,
                                             apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitlesResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitlesWithRequestBuilder(types: types,
                                                                    genres: genres,
                                                                    countryCodes: countryCodes,
                                                                    languageCodes: languageCodes,
                                                                    nameIds: nameIds,
                                                                    interestIds: interestIds,
                                                                    startYear: startYear,
                                                                    endYear: endYear,
                                                                    minVoteCount: minVoteCount,
                                                                    maxVoteCount: maxVoteCount,
                                                                    minAggregateRating: minAggregateRating,
                                                                    maxAggregateRating: maxAggregateRating,
                                                                    sortBy: sortBy,
                                                                    sortOrder: sortOrder,
                                                                    pageToken: pageToken,
                                                                    apiConfiguration: config).execute().body
    }
    
    open class func iMDbAPIServiceListTitlesWithRequestBuilder(types: [Types_iMDbAPIServiceListTitles]? = nil,
                                                               genres: [String]? = nil,
                                                               countryCodes: [String]? = nil,
                                                               languageCodes: [String]? = nil,
                                                               nameIds: [String]? = nil,
                                                               interestIds: [String]? = nil,
                                                               startYear: Int? = nil,
                                                               endYear: Int? = nil,
                                                               minVoteCount: Int? = nil,
                                                               maxVoteCount: Int? = nil,
                                                               minAggregateRating: Float? = nil,
                                                               maxAggregateRating: Float? = nil,
                                                               sortBy: SortBy_iMDbAPIServiceListTitles? = nil,
                                                               sortOrder: SortOrder_iMDbAPIServiceListTitles? = nil,
                                                               pageToken: String? = nil,
                                                               apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiListTitlesResponse> {
        let localVariablePath = "/titles"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil
        
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "types": (wrappedValue: types?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "genres": (wrappedValue: genres?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "countryCodes": (wrappedValue: countryCodes?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "languageCodes": (wrappedValue: languageCodes?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "nameIds": (wrappedValue: nameIds?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "interestIds": (wrappedValue: interestIds?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "startYear": (wrappedValue: [startYear].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "endYear": (wrappedValue: [endYear].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "minVoteCount": (wrappedValue: [minVoteCount].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "maxVoteCount": (wrappedValue: [maxVoteCount].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "minAggregateRating": (wrappedValue: [minAggregateRating].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "maxAggregateRating": (wrappedValue: [maxAggregateRating].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sortBy": (wrappedValue: [sortBy].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sortOrder": (wrappedValue: [sortOrder].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue: [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])
        
        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]
        
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        
        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitlesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()
        
        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }
    
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceSearchTitles(query: String, limit: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiSearchTitlesResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceSearchTitlesWithRequestBuilder(query: query, limit: limit, apiConfiguration: config).execute().body
    }
    
    open class func iMDbAPIServiceSearchTitlesWithRequestBuilder(query: String,
                                                                 limit: Int? = nil,
                                                                 apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared)
    -> RequestBuilder<ImdbapiSearchTitlesResponse> {
        let localVariablePath = "/search/titles"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil
        
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": (wrappedValue: [query].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "limit": (wrappedValue: [limit].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])
        
        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]
        
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        
        let localVariableRequestBuilder: RequestBuilder<ImdbapiSearchTitlesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()
        
        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }
    
    open class func iMDbAPIServiceListTitleParentsGuideWithRequestBuilder(titleId: String,
                                                                          apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared)
    -> RequestBuilder<ImdbapiListTitleParentsGuideResponse> {
        var localVariablePath = "/titles/{titleId}/parentsGuide"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil
        
        let localVariableUrlComponents = URLComponents(string: localVariableURLString)
        
        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]
        
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        
        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleParentsGuideResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()
        
        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }
    
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleReleaseDates(titleId: String,
                                                        pageSize: Int? = nil,
                                                        pageToken: String? = nil,
                                                        apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleReleaseDatesResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleReleaseDatesWithRequestBuilder(titleId: titleId, pageSize: pageSize, pageToken: pageToken, apiConfiguration: config).execute().body
    }
}
