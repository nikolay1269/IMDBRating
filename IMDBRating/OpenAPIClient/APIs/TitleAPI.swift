//
// TitleAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class TitleAPI {

    /**
     Batch get titles by IDs
     
     - parameter titleIds: (query) List of IMDb title IDs. Maximum 5 IDs. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiBatchGetTitlesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceBatchGetTitles(titleIds: [String], apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiBatchGetTitlesResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceBatchGetTitlesWithRequestBuilder(titleIds: titleIds, apiConfiguration: config).execute().body
    }

    /**
     Batch get titles by IDs
     - GET /titles:batchGet
     - Retrieve details of multiple titles using their IMDb IDs.
     - parameter titleIds: (query) List of IMDb title IDs. Maximum 5 IDs. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiBatchGetTitlesResponse> 
     */
    open class func iMDbAPIServiceBatchGetTitlesWithRequestBuilder(titleIds: [String], apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiBatchGetTitlesResponse> {
        let localVariablePath = "/titles:batchGet"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "titleIds": (wrappedValue: titleIds.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiBatchGetTitlesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Get title by ID
     
     - parameter titleId: (path) The IMDb title ID in the format &#39;tt1234567&#39;. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiTitle
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceGetTitle(titleId: String, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiTitle {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceGetTitleWithRequestBuilder(titleId: titleId, apiConfiguration: config).execute().body
    }

    /**
     Get title by ID
     - GET /titles/{titleId}
     - Retrieve a title's details using its IMDb ID.
     - parameter titleId: (path) The IMDb title ID in the format &#39;tt1234567&#39;. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiTitle> 
     */
    open class func iMDbAPIServiceGetTitleWithRequestBuilder(titleId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiTitle> {
        var localVariablePath = "/titles/{titleId}"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiTitle>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Get box office information for a title
     
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiBoxOffice
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceGetTitleBoxOffice(titleId: String, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiBoxOffice {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceGetTitleBoxOfficeWithRequestBuilder(titleId: titleId, apiConfiguration: config).execute().body
    }

    /**
     Get box office information for a title
     - GET /titles/{titleId}/boxOffice
     - Retrieve the box office information associated with a specific title.
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiBoxOffice> 
     */
    open class func iMDbAPIServiceGetTitleBoxOfficeWithRequestBuilder(titleId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiBoxOffice> {
        var localVariablePath = "/titles/{titleId}/boxOffice"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiBoxOffice>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     List AKAs for a title
     
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiListTitleAKAsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleAKAs(titleId: String, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleAKAsResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleAKAsWithRequestBuilder(titleId: titleId, apiConfiguration: config).execute().body
    }

    /**
     List AKAs for a title
     - GET /titles/{titleId}/akas
     - Retrieve the alternative titles (AKAs) associated with a specific title.
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiListTitleAKAsResponse> 
     */
    open class func iMDbAPIServiceListTitleAKAsWithRequestBuilder(titleId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiListTitleAKAsResponse> {
        var localVariablePath = "/titles/{titleId}/akas"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleAKAsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     List award nominations for a title
     
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter pageSize: (query) Optional. The maximum number of award nominations to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiListTitleAwardNominationsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleAwardNominations(titleId: String, pageSize: Int? = nil, pageToken: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleAwardNominationsResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleAwardNominationsWithRequestBuilder(titleId: titleId, pageSize: pageSize, pageToken: pageToken, apiConfiguration: config).execute().body
    }

    /**
     List award nominations for a title
     - GET /titles/{titleId}/awardNominations
     - Retrieve the award nominations associated with a specific title.
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter pageSize: (query) Optional. The maximum number of award nominations to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiListTitleAwardNominationsResponse> 
     */
    open class func iMDbAPIServiceListTitleAwardNominationsWithRequestBuilder(titleId: String, pageSize: Int? = nil, pageToken: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiListTitleAwardNominationsResponse> {
        var localVariablePath = "/titles/{titleId}/awardNominations"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": (wrappedValue: [pageSize].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue: [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleAwardNominationsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     List certificates for a title
     
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiListTitleCertificatesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleCertificates(titleId: String, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleCertificatesResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleCertificatesWithRequestBuilder(titleId: titleId, apiConfiguration: config).execute().body
    }

    /**
     List certificates for a title
     - GET /titles/{titleId}/certificates
     - Retrieve the certificates associated with a specific title.
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiListTitleCertificatesResponse> 
     */
    open class func iMDbAPIServiceListTitleCertificatesWithRequestBuilder(titleId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiListTitleCertificatesResponse> {
        var localVariablePath = "/titles/{titleId}/certificates"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleCertificatesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     List company credits for a title
     
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter categories: (query) Optional. The categories of company credits to filter by. (optional)
     - parameter pageSize: (query) Optional. The maximum number of company credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiListTitleCompanyCreditsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleCompanyCredits(titleId: String, categories: [String]? = nil, pageSize: Int? = nil, pageToken: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleCompanyCreditsResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleCompanyCreditsWithRequestBuilder(titleId: titleId, categories: categories, pageSize: pageSize, pageToken: pageToken, apiConfiguration: config).execute().body
    }

    /**
     List company credits for a title
     - GET /titles/{titleId}/companyCredits
     - Retrieve the company credits associated with a specific title.
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter categories: (query) Optional. The categories of company credits to filter by. (optional)
     - parameter pageSize: (query) Optional. The maximum number of company credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiListTitleCompanyCreditsResponse> 
     */
    open class func iMDbAPIServiceListTitleCompanyCreditsWithRequestBuilder(titleId: String, categories: [String]? = nil, pageSize: Int? = nil, pageToken: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiListTitleCompanyCreditsResponse> {
        var localVariablePath = "/titles/{titleId}/companyCredits"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "categories": (wrappedValue: categories?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageSize": (wrappedValue: [pageSize].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue: [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleCompanyCreditsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     List credits for a title
     
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter categories: (query) Optional. The categories of credits to filter by. (optional)
     - parameter pageSize: (query) Optional. The maximum number of credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiListTitleCreditsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleCredits(titleId: String, categories: [String]? = nil, pageSize: Int? = nil, pageToken: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleCreditsResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleCreditsWithRequestBuilder(titleId: titleId, categories: categories, pageSize: pageSize, pageToken: pageToken, apiConfiguration: config).execute().body
    }

    /**
     List credits for a title
     - GET /titles/{titleId}/credits
     - Retrieve the credits associated with a specific title.
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter categories: (query) Optional. The categories of credits to filter by. (optional)
     - parameter pageSize: (query) Optional. The maximum number of credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiListTitleCreditsResponse> 
     */
    open class func iMDbAPIServiceListTitleCreditsWithRequestBuilder(titleId: String, categories: [String]? = nil, pageSize: Int? = nil, pageToken: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiListTitleCreditsResponse> {
        var localVariablePath = "/titles/{titleId}/credits"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "categories": (wrappedValue: categories?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageSize": (wrappedValue: [pageSize].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue: [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleCreditsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     List episodes for a title
     
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter season: (query) Optional. The season number to filter episodes by. (optional)
     - parameter pageSize: (query) Optional. The maximum number of episodes to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiListTitleEpisodesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleEpisodes(titleId: String, season: String? = nil, pageSize: Int? = nil, pageToken: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleEpisodesResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleEpisodesWithRequestBuilder(titleId: titleId, season: season, pageSize: pageSize, pageToken: pageToken, apiConfiguration: config).execute().body
    }

    /**
     List episodes for a title
     - GET /titles/{titleId}/episodes
     - Retrieve the episodes associated with a specific title.
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter season: (query) Optional. The season number to filter episodes by. (optional)
     - parameter pageSize: (query) Optional. The maximum number of episodes to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiListTitleEpisodesResponse> 
     */
    open class func iMDbAPIServiceListTitleEpisodesWithRequestBuilder(titleId: String, season: String? = nil, pageSize: Int? = nil, pageToken: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiListTitleEpisodesResponse> {
        var localVariablePath = "/titles/{titleId}/episodes"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "season": (wrappedValue: [season].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageSize": (wrappedValue: [pageSize].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue: [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleEpisodesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     List images for a title
     
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter types: (query) Optional. The types of images to filter by. If not specified, all types are returned. (optional)
     - parameter pageSize: (query) Optional. The maximum number of images to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiListTitleImagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleImages(titleId: String, types: [String]? = nil, pageSize: Int? = nil, pageToken: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleImagesResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleImagesWithRequestBuilder(titleId: titleId, types: types, pageSize: pageSize, pageToken: pageToken, apiConfiguration: config).execute().body
    }

    /**
     List images for a title
     - GET /titles/{titleId}/images
     - Retrieve the images associated with a specific title.
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter types: (query) Optional. The types of images to filter by. If not specified, all types are returned. (optional)
     - parameter pageSize: (query) Optional. The maximum number of images to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiListTitleImagesResponse> 
     */
    open class func iMDbAPIServiceListTitleImagesWithRequestBuilder(titleId: String, types: [String]? = nil, pageSize: Int? = nil, pageToken: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiListTitleImagesResponse> {
        var localVariablePath = "/titles/{titleId}/images"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "types": (wrappedValue: types?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageSize": (wrappedValue: [pageSize].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue: [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleImagesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     List parents guide for a title
     
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiListTitleParentsGuideResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleParentsGuide(titleId: String, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleParentsGuideResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleParentsGuideWithRequestBuilder(titleId: titleId, apiConfiguration: config).execute().body
    }

    /**
     List parents guide for a title
     - GET /titles/{titleId}/parentsGuide
     - Retrieve the parents guide associated with a specific title.
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiListTitleParentsGuideResponse> 
     */
    open class func iMDbAPIServiceListTitleParentsGuideWithRequestBuilder(titleId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiListTitleParentsGuideResponse> {
        var localVariablePath = "/titles/{titleId}/parentsGuide"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleParentsGuideResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     List release dates for a title
     
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter pageSize: (query) Optional. The maximum number of credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiListTitleReleaseDatesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleReleaseDates(titleId: String, pageSize: Int? = nil, pageToken: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleReleaseDatesResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleReleaseDatesWithRequestBuilder(titleId: titleId, pageSize: pageSize, pageToken: pageToken, apiConfiguration: config).execute().body
    }

    /**
     List release dates for a title
     - GET /titles/{titleId}/releaseDates
     - Retrieve the release dates associated with a specific title.
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter pageSize: (query) Optional. The maximum number of credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiListTitleReleaseDatesResponse> 
     */
    open class func iMDbAPIServiceListTitleReleaseDatesWithRequestBuilder(titleId: String, pageSize: Int? = nil, pageToken: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiListTitleReleaseDatesResponse> {
        var localVariablePath = "/titles/{titleId}/releaseDates"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": (wrappedValue: [pageSize].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue: [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleReleaseDatesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     List seasons for a title
     
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiListTitleSeasonsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleSeasons(titleId: String, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleSeasonsResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleSeasonsWithRequestBuilder(titleId: titleId, apiConfiguration: config).execute().body
    }

    /**
     List seasons for a title
     - GET /titles/{titleId}/seasons
     - Retrieve the seasons associated with a specific title.
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiListTitleSeasonsResponse> 
     */
    open class func iMDbAPIServiceListTitleSeasonsWithRequestBuilder(titleId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiListTitleSeasonsResponse> {
        var localVariablePath = "/titles/{titleId}/seasons"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleSeasonsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     List videos for a title
     
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter types: (query) Optional. The types of videos to filter by. If not specified, all types are returned. (optional)
     - parameter pageSize: (query) Optional. The maximum number of videos to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiListTitleVideosResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitleVideos(titleId: String, types: [String]? = nil, pageSize: Int? = nil, pageToken: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitleVideosResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitleVideosWithRequestBuilder(titleId: titleId, types: types, pageSize: pageSize, pageToken: pageToken, apiConfiguration: config).execute().body
    }

    /**
     List videos for a title
     - GET /titles/{titleId}/videos
     - Retrieve the videos associated with a specific title.
     - parameter titleId: (path) Required. IMDb title ID in the format \&quot;tt1234567\&quot;. 
     - parameter types: (query) Optional. The types of videos to filter by. If not specified, all types are returned. (optional)
     - parameter pageSize: (query) Optional. The maximum number of videos to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiListTitleVideosResponse> 
     */
    open class func iMDbAPIServiceListTitleVideosWithRequestBuilder(titleId: String, types: [String]? = nil, pageSize: Int? = nil, pageToken: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiListTitleVideosResponse> {
        var localVariablePath = "/titles/{titleId}/videos"
        let titleIdPreEscape = "\(APIHelper.mapValueToPathItem(titleId))"
        let titleIdPostEscape = titleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{titleId}", with: titleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "types": (wrappedValue: types?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageSize": (wrappedValue: [pageSize].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue: [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitleVideosResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter types
     */
    public enum Types_iMDbAPIServiceListTitles: String, Sendable, CaseIterable {
        case movie = "MOVIE"
        case tvSeries = "TV_SERIES"
        case tvMiniSeries = "TV_MINI_SERIES"
        case tvSpecial = "TV_SPECIAL"
        case tvMovie = "TV_MOVIE"
        case short = "SHORT"
        case video = "VIDEO"
        case videoGame = "VIDEO_GAME"
    }

    /**
     * enum for parameter sortBy
     */
    public enum SortBy_iMDbAPIServiceListTitles: String, Sendable, CaseIterable {
        case sortByPopularity = "SORT_BY_POPULARITY"
        case sortByReleaseDate = "SORT_BY_RELEASE_DATE"
        case sortByUserRating = "SORT_BY_USER_RATING"
        case sortByUserRatingCount = "SORT_BY_USER_RATING_COUNT"
        case sortByYear = "SORT_BY_YEAR"
    }

    /**
     * enum for parameter sortOrder
     */
    public enum SortOrder_iMDbAPIServiceListTitles: String, Sendable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     List titles
     
     - parameter types: (query) Optional. The type of titles to filter by. If not specified, all types are returned.   - MOVIE: Represents a movie title.  - TV_SERIES: Represents a TV series title.  - TV_MINI_SERIES: Represents a TV mini-series title.  - TV_SPECIAL: Represents a TV special title.  - TV_MOVIE: Represents a TV movie title.  - SHORT: Represents a short title.  - VIDEO: Represents a video title.  - VIDEO_GAME: Represents a video game title. (optional)
     - parameter genres: (query) Optional. The genres to filter titles by. If not specified, titles from all genres are returned. (optional)
     - parameter countryCodes: (query) Optional. The ISO 3166-1 alpha-2 country codes to filter titles by. If not specified, titles from all countries are returned. Example: \&quot;US\&quot; for United States, \&quot;GB\&quot; for United Kingdom. (optional)
     - parameter languageCodes: (query) Optional. The ISO 639-1 or ISO 639-2 language codes to filter titles by. If not specified, titles in all languages are returned. (optional)
     - parameter nameIds: (query) Optional. The IDs of names to filter titles by. (optional)
     - parameter interestIds: (query) Optional. The IDs of interests to filter titles by. If not specified, titles associated with all interests are returned. (optional)
     - parameter startYear: (query) Optional. The start year for filtering titles. (optional)
     - parameter endYear: (query) Optional. The end year for filtering titles. (optional)
     - parameter minVoteCount: (query) Optional. The minimum number of votes a title must have to be included. If not specified, titles with any number of votes are included. The value must be between 0 and 1,000,000,000. Default is 0. (optional)
     - parameter maxVoteCount: (query) Optional. The maximum number of votes a title can have to be included. If not specified, titles with any number of votes are included. The value must be between 0 and 1,000,000,000. (optional)
     - parameter minAggregateRating: (query) Optional. The minimum rating a title must have to be included. If not specified, titles with any rating are included. The value must be between 0.0 and 10.0. (optional)
     - parameter maxAggregateRating: (query) Optional. The maximum rating a title can have to be included. If not specified, titles with any rating are included. The value must be between 0.0 and 10.0. (optional)
     - parameter sortBy: (query) Optional. The sorting order for the titles. If not specified, titles are sorted by popularity.   - SORT_BY_POPULARITY: Sort by popularity. This is used to rank titles based on their popularity, which can be influenced by various factors such as viewership, ratings, and cultural impact.  - SORT_BY_RELEASE_DATE: Sort by release date. This is used to rank titles based on their release dates, with newer titles typically appearing before older ones.  - SORT_BY_USER_RATING: Sort by user rating. This is used to rank titles based on the average user rating, which reflects the overall audience reception.  - SORT_BY_USER_RATING_COUNT: Sort by user rating count. This is used to rank titles based on the number of user ratings they have received, which can indicate the level of engagement or popularity among viewers.  - SORT_BY_YEAR: Sort by year. This is used to rank titles based on their release year, with newer titles typically appearing before older ones. (optional)
     - parameter sortOrder: (query) Optional. The sorting order for the titles. If not specified, titles are sorted in ascending order.   - ASC: Sort in ascending order.  - DESC: Sort in descending order. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiListTitlesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListTitles(types: [Types_iMDbAPIServiceListTitles]? = nil, genres: [String]? = nil, countryCodes: [String]? = nil, languageCodes: [String]? = nil, nameIds: [String]? = nil, interestIds: [String]? = nil, startYear: Int? = nil, endYear: Int? = nil, minVoteCount: Int? = nil, maxVoteCount: Int? = nil, minAggregateRating: Float? = nil, maxAggregateRating: Float? = nil, sortBy: SortBy_iMDbAPIServiceListTitles? = nil, sortOrder: SortOrder_iMDbAPIServiceListTitles? = nil, pageToken: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListTitlesResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListTitlesWithRequestBuilder(types: types, genres: genres, countryCodes: countryCodes, languageCodes: languageCodes, nameIds: nameIds, interestIds: interestIds, startYear: startYear, endYear: endYear, minVoteCount: minVoteCount, maxVoteCount: maxVoteCount, minAggregateRating: minAggregateRating, maxAggregateRating: maxAggregateRating, sortBy: sortBy, sortOrder: sortOrder, pageToken: pageToken, apiConfiguration: config).execute().body
    }

    /**
     List titles
     - GET /titles
     - Retrieve a list of titles with optional filters.
     - parameter types: (query) Optional. The type of titles to filter by. If not specified, all types are returned.   - MOVIE: Represents a movie title.  - TV_SERIES: Represents a TV series title.  - TV_MINI_SERIES: Represents a TV mini-series title.  - TV_SPECIAL: Represents a TV special title.  - TV_MOVIE: Represents a TV movie title.  - SHORT: Represents a short title.  - VIDEO: Represents a video title.  - VIDEO_GAME: Represents a video game title. (optional)
     - parameter genres: (query) Optional. The genres to filter titles by. If not specified, titles from all genres are returned. (optional)
     - parameter countryCodes: (query) Optional. The ISO 3166-1 alpha-2 country codes to filter titles by. If not specified, titles from all countries are returned. Example: \&quot;US\&quot; for United States, \&quot;GB\&quot; for United Kingdom. (optional)
     - parameter languageCodes: (query) Optional. The ISO 639-1 or ISO 639-2 language codes to filter titles by. If not specified, titles in all languages are returned. (optional)
     - parameter nameIds: (query) Optional. The IDs of names to filter titles by. (optional)
     - parameter interestIds: (query) Optional. The IDs of interests to filter titles by. If not specified, titles associated with all interests are returned. (optional)
     - parameter startYear: (query) Optional. The start year for filtering titles. (optional)
     - parameter endYear: (query) Optional. The end year for filtering titles. (optional)
     - parameter minVoteCount: (query) Optional. The minimum number of votes a title must have to be included. If not specified, titles with any number of votes are included. The value must be between 0 and 1,000,000,000. Default is 0. (optional)
     - parameter maxVoteCount: (query) Optional. The maximum number of votes a title can have to be included. If not specified, titles with any number of votes are included. The value must be between 0 and 1,000,000,000. (optional)
     - parameter minAggregateRating: (query) Optional. The minimum rating a title must have to be included. If not specified, titles with any rating are included. The value must be between 0.0 and 10.0. (optional)
     - parameter maxAggregateRating: (query) Optional. The maximum rating a title can have to be included. If not specified, titles with any rating are included. The value must be between 0.0 and 10.0. (optional)
     - parameter sortBy: (query) Optional. The sorting order for the titles. If not specified, titles are sorted by popularity.   - SORT_BY_POPULARITY: Sort by popularity. This is used to rank titles based on their popularity, which can be influenced by various factors such as viewership, ratings, and cultural impact.  - SORT_BY_RELEASE_DATE: Sort by release date. This is used to rank titles based on their release dates, with newer titles typically appearing before older ones.  - SORT_BY_USER_RATING: Sort by user rating. This is used to rank titles based on the average user rating, which reflects the overall audience reception.  - SORT_BY_USER_RATING_COUNT: Sort by user rating count. This is used to rank titles based on the number of user ratings they have received, which can indicate the level of engagement or popularity among viewers.  - SORT_BY_YEAR: Sort by year. This is used to rank titles based on their release year, with newer titles typically appearing before older ones. (optional)
     - parameter sortOrder: (query) Optional. The sorting order for the titles. If not specified, titles are sorted in ascending order.   - ASC: Sort in ascending order.  - DESC: Sort in descending order. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiListTitlesResponse> 
     */
    open class func iMDbAPIServiceListTitlesWithRequestBuilder(types: [Types_iMDbAPIServiceListTitles]? = nil, genres: [String]? = nil, countryCodes: [String]? = nil, languageCodes: [String]? = nil, nameIds: [String]? = nil, interestIds: [String]? = nil, startYear: Int? = nil, endYear: Int? = nil, minVoteCount: Int? = nil, maxVoteCount: Int? = nil, minAggregateRating: Float? = nil, maxAggregateRating: Float? = nil, sortBy: SortBy_iMDbAPIServiceListTitles? = nil, sortOrder: SortOrder_iMDbAPIServiceListTitles? = nil, pageToken: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiListTitlesResponse> {
        let localVariablePath = "/titles"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "types": (wrappedValue: types?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "genres": (wrappedValue: genres?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "countryCodes": (wrappedValue: countryCodes?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "languageCodes": (wrappedValue: languageCodes?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "nameIds": (wrappedValue: nameIds?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "interestIds": (wrappedValue: interestIds?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "startYear": (wrappedValue: [startYear].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "endYear": (wrappedValue: [endYear].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "minVoteCount": (wrappedValue: [minVoteCount].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "maxVoteCount": (wrappedValue: [maxVoteCount].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "minAggregateRating": (wrappedValue: [minAggregateRating].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "maxAggregateRating": (wrappedValue: [maxAggregateRating].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sortBy": (wrappedValue: [sortBy].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sortOrder": (wrappedValue: [sortOrder].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue: [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiListTitlesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Search titles by query
     
     - parameter query: (query) Required. The search query for titles. 
     - parameter limit: (query) Optional. Limit the number of results returned. Maximum is 50. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiSearchTitlesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceSearchTitles(query: String, limit: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiSearchTitlesResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceSearchTitlesWithRequestBuilder(query: query, limit: limit, apiConfiguration: config).execute().body
    }

    /**
     Search titles by query
     - GET /search/titles
     - Search for titles using a query string.
     - parameter query: (query) Required. The search query for titles. 
     - parameter limit: (query) Optional. Limit the number of results returned. Maximum is 50. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiSearchTitlesResponse> 
     */
    open class func iMDbAPIServiceSearchTitlesWithRequestBuilder(query: String, limit: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiSearchTitlesResponse> {
        let localVariablePath = "/search/titles"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": (wrappedValue: [query].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "limit": (wrappedValue: [limit].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiSearchTitlesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }
}
