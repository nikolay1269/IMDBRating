//
// NameAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class NameAPI {

    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceBatchGetNames(
        nameIds: [String],
        apiConfiguration: OpenAPIClientAPIConfiguration? = nil
    ) async throws(ErrorResponse) -> ImdbapiBatchGetNamesResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceBatchGetNamesWithRequestBuilder(
            nameIds: nameIds,
            apiConfiguration: config).execute().body
    }

    open class func iMDbAPIServiceBatchGetNamesWithRequestBuilder(
        nameIds: [String],
        apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<ImdbapiBatchGetNamesResponse> {
        let localVariablePath = "/names:batchGet"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "nameIds": (wrappedValue: nameIds.asParameter(codableHelper: apiConfiguration.codableHelper),
                        isExplode: true)])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        let localVariableRequestBuilder: RequestBuilder<ImdbapiBatchGetNamesResponse>.Type
            = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters,
            headers: localVariableHeaderParameters,
            requiresAuthentication: false,
            apiConfiguration: apiConfiguration)
    }

    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceGetName(
        nameId: String,
        apiConfiguration: OpenAPIClientAPIConfiguration? = nil
    ) async throws(ErrorResponse) -> ImdbapiName {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceGetNameWithRequestBuilder(
            nameId: nameId,
            apiConfiguration: config).execute().body
    }

    open class func iMDbAPIServiceGetNameWithRequestBuilder(
        nameId: String,
        apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<ImdbapiName> {
        var localVariablePath = "/names/{nameId}"
        let nameIdPreEscape = "\(APIHelper.mapValueToPathItem(nameId))"
        let nameIdPostEscape = nameIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{nameId}",
                                                                   with: nameIdPostEscape,
                                                                   options: .literal,
                                                                   range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)
        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        let localVariableRequestBuilder: RequestBuilder<ImdbapiName>.Type
            = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters,
            headers: localVariableHeaderParameters,
            requiresAuthentication: false,
            apiConfiguration: apiConfiguration)
    }

    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListNameFilmography(
        nameId: String,
        categories: [String]? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        apiConfiguration: OpenAPIClientAPIConfiguration? = nil
    ) async throws(ErrorResponse) -> ImdbapiListNameFilmographyResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListNameFilmographyWithRequestBuilder(nameId: nameId,
                                                                             categories: categories,
                                                                             pageSize: pageSize,
                                                                             pageToken: pageToken,
                                                                             apiConfiguration: config).execute().body
    }

    open class func iMDbAPIServiceListNameFilmographyWithRequestBuilder(
        nameId: String,
        categories: [String]? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<ImdbapiListNameFilmographyResponse> {
        var localVariablePath = "/names/{nameId}/filmography"
        let nameIdPreEscape = "\(APIHelper.mapValueToPathItem(nameId))"
        let nameIdPostEscape = nameIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{nameId}",
                                                                   with: nameIdPostEscape,
                                                                   options: .literal,
                                                                   range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "categories": (wrappedValue: categories?.asParameter(
                codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageSize": (wrappedValue: [pageSize].asParameter(
                codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue: [pageToken].asParameter(
                codableHelper: apiConfiguration.codableHelper), isExplode: true)
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        let localVariableRequestBuilder: RequestBuilder<ImdbapiListNameFilmographyResponse>.Type
            = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters,
            headers: localVariableHeaderParameters,
            requiresAuthentication: false,
            apiConfiguration: apiConfiguration)
    }

    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListNameImages(
        nameId: String,
        types: [String]? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        apiConfiguration: OpenAPIClientAPIConfiguration? = nil
    ) async throws(ErrorResponse) -> ImdbapiListNameImagesResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListNameImagesWithRequestBuilder(nameId: nameId,
                                                                        types: types,
                                                                        pageSize: pageSize,
                                                                        pageToken: pageToken,
                                                                        apiConfiguration: config).execute().body
    }

    open class func iMDbAPIServiceListNameImagesWithRequestBuilder(
        nameId: String,
        types: [String]? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<ImdbapiListNameImagesResponse> {
        var localVariablePath = "/names/{nameId}/images"
        let nameIdPreEscape = "\(APIHelper.mapValueToPathItem(nameId))"
        let nameIdPostEscape = nameIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{nameId}",
                                                                   with: nameIdPostEscape,
                                                                   options: .literal,
                                                                   range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "types": (wrappedValue: types?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageSize": (wrappedValue:
                            [pageSize].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue:
                            [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true)
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        let localVariableRequestBuilder: RequestBuilder<ImdbapiListNameImagesResponse>.Type
            = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters,
            headers: localVariableHeaderParameters,
            requiresAuthentication: false,
            apiConfiguration: apiConfiguration)
    }

    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListNameRelationships(
        nameId: String,
        apiConfiguration: OpenAPIClientAPIConfiguration? = nil
    ) async throws(ErrorResponse) -> ImdbapiListNameRelationshipsResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListNameRelationshipsWithRequestBuilder(nameId: nameId,
                                                                               apiConfiguration: config).execute().body
    }

    open class func iMDbAPIServiceListNameRelationshipsWithRequestBuilder(
        nameId: String,
        apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<ImdbapiListNameRelationshipsResponse> {
        var localVariablePath = "/names/{nameId}/relationships"
        let nameIdPreEscape = "\(APIHelper.mapValueToPathItem(nameId))"
        let nameIdPostEscape = nameIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{nameId}",
                                                                   with: nameIdPostEscape,
                                                                   options: .literal,
                                                                   range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)
        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        let localVariableRequestBuilder: RequestBuilder<ImdbapiListNameRelationshipsResponse>.Type
            = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters,
            headers: localVariableHeaderParameters,
            requiresAuthentication: false,
            apiConfiguration: apiConfiguration)
    }
}

extension NameAPI {
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public class func iMDbAPIServiceListStarMeters(
        pageToken: String? = nil,
        apiConfiguration: OpenAPIClientAPIConfiguration? = nil
    ) async throws(ErrorResponse) -> ImdbapiListStarMetersResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListStarMetersWithRequestBuilder(
            pageToken: pageToken,
            apiConfiguration: config).execute().body
    }
    public class func iMDbAPIServiceListStarMetersWithRequestBuilder(
        pageToken: String? = nil,
        apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<ImdbapiListStarMetersResponse> {
        let localVariablePath = "/chart/starmeter"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageToken": (wrappedValue:
                            [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true)
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        let localVariableRequestBuilder: RequestBuilder<ImdbapiListStarMetersResponse>.Type
            = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters,
            headers: localVariableHeaderParameters,
            requiresAuthentication: false,
            apiConfiguration: apiConfiguration)
    }
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public class func iMDbAPIServiceListNameTrivia(
        nameId: String,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        apiConfiguration: OpenAPIClientAPIConfiguration? = nil
    ) async throws(ErrorResponse) -> ImdbapiListNameTriviaResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListNameTriviaWithRequestBuilder(nameId: nameId,
                                                                        pageSize: pageSize,
                                                                        pageToken: pageToken,
                                                                        apiConfiguration: config).execute().body
    }

    public class func iMDbAPIServiceListNameTriviaWithRequestBuilder(
        nameId: String,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<ImdbapiListNameTriviaResponse> {
        var localVariablePath = "/names/{nameId}/trivia"
        let nameIdPreEscape = "\(APIHelper.mapValueToPathItem(nameId))"
        let nameIdPostEscape = nameIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{nameId}",
                                                                   with: nameIdPostEscape,
                                                                   options: .literal,
                                                                   range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": (wrappedValue:
                            [pageSize].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue:
                            [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true)
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        let localVariableRequestBuilder: RequestBuilder<ImdbapiListNameTriviaResponse>.Type
            = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters,
            headers: localVariableHeaderParameters,
            requiresAuthentication: false,
            apiConfiguration: apiConfiguration)
    }
}
