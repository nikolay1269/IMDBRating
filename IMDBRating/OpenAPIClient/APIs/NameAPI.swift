//
// NameAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class NameAPI {

    /**
     Batch get names by IDs
     
     - parameter nameIds: (query) Required. List of IMDb name IDs in the format \&quot;nm1234567\&quot;. The maximum number of IDs is 5. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiBatchGetNamesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceBatchGetNames(nameIds: [String], apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiBatchGetNamesResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceBatchGetNamesWithRequestBuilder(nameIds: nameIds, apiConfiguration: config).execute().body
    }

    /**
     Batch get names by IDs
     - GET /names:batchGet
     - Retrieve details of multiple names using their IMDb IDs.
     - parameter nameIds: (query) Required. List of IMDb name IDs in the format \&quot;nm1234567\&quot;. The maximum number of IDs is 5. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiBatchGetNamesResponse> 
     */
    open class func iMDbAPIServiceBatchGetNamesWithRequestBuilder(nameIds: [String],
                                                                  apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared)
                                                                                                        -> RequestBuilder<ImdbapiBatchGetNamesResponse> {
        let localVariablePath = "/names:batchGet"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "nameIds": (wrappedValue: nameIds.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiBatchGetNamesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }

    /**
     Get name by ID
     
     - parameter nameId: (path) Required. IMDB name ID in the format \&quot;nm1234567\&quot;. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiName
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceGetName(nameId: String, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiName {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceGetNameWithRequestBuilder(nameId: nameId, apiConfiguration: config).execute().body
    }

    /**
     Get name by ID
     - GET /names/{nameId}
     - Retrieve a name's details using its IMDb ID.
     - parameter nameId: (path) Required. IMDB name ID in the format \&quot;nm1234567\&quot;. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiName> 
     */
    open class func iMDbAPIServiceGetNameWithRequestBuilder(nameId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiName> {
        var localVariablePath = "/names/{nameId}"
        let nameIdPreEscape = "\(APIHelper.mapValueToPathItem(nameId))"
        let nameIdPostEscape = nameIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{nameId}", with: nameIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiName>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }

    /**
     List filmography for a name
     
     - parameter nameId: (path) Required. IMDB name ID in the format \&quot;nm1234567\&quot;. 
     - parameter categories: (query) Optional. The categories of credits to filter by. If not specified, all categories are returned. (optional)
     - parameter pageSize: (query) Optional. The maximum number of credits to return per page. If not specified, a default value will be used.
     The value must be between 1 and 50. Default is 20. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiListNameFilmographyResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListNameFilmography(nameId: String,
                                                      categories: [String]? = nil,
                                                      pageSize: Int? = nil,
                                                      pageToken: String? = nil,
                                                      apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListNameFilmographyResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListNameFilmographyWithRequestBuilder(nameId: nameId, categories: categories, pageSize: pageSize, pageToken: pageToken, apiConfiguration: config).execute().body
    }

    /**
     List filmography for a name
     - GET /names/{nameId}/filmography
     - Retrieve the filmography associated with a specific name.
     - parameter nameId: (path) Required. IMDB name ID in the format \&quot;nm1234567\&quot;. 
     - parameter categories: (query) Optional. The categories of credits to filter by. If not specified, all categories are returned. (optional)
     - parameter pageSize: (query) Optional. The maximum number of credits to return per page. If not specified, a default value will be used.
     The value must be between 1 and 50. Default is 20. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiListNameFilmographyResponse> 
     */
    open class func iMDbAPIServiceListNameFilmographyWithRequestBuilder(nameId: String,
                                                                        categories: [String]? = nil,
                                                                        pageSize: Int? = nil,
                                                                        pageToken: String? = nil,
                                                                        apiConfiguration: OpenAPIClientAPIConfiguration
                                                                        = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImdbapiListNameFilmographyResponse> {
        var localVariablePath = "/names/{nameId}/filmography"
        let nameIdPreEscape = "\(APIHelper.mapValueToPathItem(nameId))"
        let nameIdPostEscape = nameIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{nameId}", with: nameIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "categories": (wrappedValue: categories?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageSize": (wrappedValue: [pageSize].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue: [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiListNameFilmographyResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }

    /**
     List images for a name
     
     - parameter nameId: (path) Required. IMDB name ID in the format \&quot;nm1234567\&quot;. 
     - parameter types: (query) Optional. The types of images to filter by. If not specified, all types are returned. (optional)
     - parameter pageSize: (query) Optional. The maximum number of images to return per page. If not specified, a default value will be used.
     The value must be between 1 and 50. Default is 20. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiListNameImagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListNameImages(nameId: String,
                                                 types: [String]? = nil,
                                                 pageSize: Int? = nil,
                                                 pageToken: String? = nil,
                                                 apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListNameImagesResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListNameImagesWithRequestBuilder(nameId: nameId, types: types, pageSize: pageSize, pageToken: pageToken, apiConfiguration: config).execute().body
    }

    /**
     List images for a name
     - GET /names/{nameId}/images
     - Retrieve the images associated with a specific name.
     - parameter nameId: (path) Required. IMDB name ID in the format \&quot;nm1234567\&quot;. 
     - parameter types: (query) Optional. The types of images to filter by. If not specified, all types are returned. (optional)
     - parameter pageSize: (query) Optional. The maximum number of images to return per page. If not specified, a default value will be used.
     The value must be between 1 and 50. Default is 20. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiListNameImagesResponse> 
     */
    open class func iMDbAPIServiceListNameImagesWithRequestBuilder(nameId: String,
                                                                   types: [String]? = nil,
                                                                   pageSize: Int? = nil,
                                                                   pageToken: String? = nil,
                                                                   apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared)
                                                                    -> RequestBuilder<ImdbapiListNameImagesResponse> {
        var localVariablePath = "/names/{nameId}/images"
        let nameIdPreEscape = "\(APIHelper.mapValueToPathItem(nameId))"
        let nameIdPostEscape = nameIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{nameId}", with: nameIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "types": (wrappedValue: types?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageSize": (wrappedValue: [pageSize].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue: [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiListNameImagesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }

    /**
     List relationships for a name
     
     - parameter nameId: (path) Required. IMDB name ID in the format \&quot;nm1234567\&quot;. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiListNameRelationshipsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListNameRelationships(nameId: String, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListNameRelationshipsResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListNameRelationshipsWithRequestBuilder(nameId: nameId, apiConfiguration: config).execute().body
    }

    /**
     List relationships for a name
     - GET /names/{nameId}/relationships
     - Retrieve the relationships associated with a specific name.
     - parameter nameId: (path) Required. IMDB name ID in the format \&quot;nm1234567\&quot;. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiListNameRelationshipsResponse> 
     */
    open class func iMDbAPIServiceListNameRelationshipsWithRequestBuilder(nameId: String,
                                                                          apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared)
                                                                            -> RequestBuilder<ImdbapiListNameRelationshipsResponse> {
        var localVariablePath = "/names/{nameId}/relationships"
        let nameIdPreEscape = "\(APIHelper.mapValueToPathItem(nameId))"
        let nameIdPostEscape = nameIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{nameId}", with: nameIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiListNameRelationshipsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }

    /**
     List trivia for a name
     
     - parameter nameId: (path) Required. IMDB name ID in the format \&quot;nm1234567\&quot;. 
     - parameter pageSize: (query) Optional. The maximum number of trivia entries to return per page.
     If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiListNameTriviaResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListNameTrivia(nameId: String,
                                                 pageSize: Int? = nil,
                                                 pageToken: String? = nil,
                                                 apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListNameTriviaResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListNameTriviaWithRequestBuilder(nameId: nameId, pageSize: pageSize, pageToken: pageToken, apiConfiguration: config).execute().body
    }

    /**
     List trivia for a name
     - GET /names/{nameId}/trivia
     - Retrieve the trivia associated with a specific name.
     - parameter nameId: (path) Required. IMDB name ID in the format \&quot;nm1234567\&quot;. 
     - parameter pageSize: (query) Optional. The maximum number of trivia entries to return per page.
     If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20. (optional)
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiListNameTriviaResponse> 
     */
    open class func iMDbAPIServiceListNameTriviaWithRequestBuilder(nameId: String,
                                                                   pageSize: Int? = nil,
                                                                   pageToken: String? = nil,
                                                                   apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared)
                                                                    -> RequestBuilder<ImdbapiListNameTriviaResponse> {
        var localVariablePath = "/names/{nameId}/trivia"
        let nameIdPreEscape = "\(APIHelper.mapValueToPathItem(nameId))"
        let nameIdPostEscape = nameIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{nameId}", with: nameIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": (wrappedValue: [pageSize].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageToken": (wrappedValue: [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiListNameTriviaResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }

    /**
     List star meter rankings
     
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImdbapiListStarMetersResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iMDbAPIServiceListStarMeters(pageToken: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration? = nil) async throws(ErrorResponse) -> ImdbapiListStarMetersResponse {
        let config = apiConfiguration ?? OpenAPIClientAPIConfiguration.shared
        return try await iMDbAPIServiceListStarMetersWithRequestBuilder(pageToken: pageToken, apiConfiguration: config).execute().body
    }

    /**
     List star meter rankings
     - GET /chart/starmeter
     - Retrieve the star meter rankings for names.
     - parameter pageToken: (query) Optional. Token for pagination, if applicable. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImdbapiListStarMetersResponse> 
     */
    open class func iMDbAPIServiceListStarMetersWithRequestBuilder(pageToken: String? = nil,
                                                                   apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared)
                                                                    -> RequestBuilder<ImdbapiListStarMetersResponse> {
        let localVariablePath = "/chart/starmeter"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageToken": (wrappedValue: [pageToken].asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImdbapiListStarMetersResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET",
                                                URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
                                                parameters: localVariableParameters,
                                                headers: localVariableHeaderParameters,
                                                requiresAuthentication: false,
                                                apiConfiguration: apiConfiguration)
    }
}

